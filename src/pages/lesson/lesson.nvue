<!--
 * @Author: yranky douye@douye.top
 * @Date: 2022-07-28 07:24:55
 * @LastEditors: yranky douye@douye.top
 * @LastEditTime: 2023-08-06 20:37:24
 * @FilePath: \anydoor-v2\src\pages\lesson\lesson.nvue
 * @Description: 课程表
 * 
 * Copyright (c) 2023 by anydoor.top|douyeblog.top, All Rights Reserved. 
-->
<template>
	<tm-app ref="app" color="whiteBg">
		<view class="lesson-bg">
			<image class="lesson-bg" src="../../static/bg/bg.png"></image>
			<view class="lesson-bg" :style="{ backgroundColor: 'rgba(0,0,0,.3)' }" v-if="store.tmStore.dark"></view>
		</view>
		<view style="position:fixed;">
			<anydoorPage v-model:refresh-complete="refreshComplete" @refresh="refresh">
				<template #navBar>
					<!-- 课程表 -->
					<tm-navbar transprent hideBack hideHome :leftWidth="250">
						<template #left>
							<anydoor-text class="flex-2" text="2023年春季学期" :lines="1"
								style="margin:0 16rpx;text-align: right;"></anydoor-text>
						</template>
						<template #default>
							<view class="flex flex-center flex-row">
								<tm-icon customicon name="tmicon-angle-left" :fontSize="30" @click="preWeek"></tm-icon>
								<anydoor-text class="flex-2"
									:text="'第' + currentShowWeeks + '周' + (currentWeeks === currentShowWeeks ? '' : '(非本周)')"
									:lines="currentWeeks === currentShowWeeks ? 1 : 2"
									:color="currentWeeks === currentShowWeeks ? '' : redFont" :fontSize="30"
									style="margin:0 3rpx;text-align: right;"></anydoor-text>
								<tm-icon customicon name="tmicon-angle-right" :fontSize="30" @click="nextWeek"></tm-icon>
							</view>
						</template>
						<template #right>
							<view class="flex flex-center flex-row pl-16 pr-16">
								<view class=" pl-16 pr-16" @click="linkTo(ROUTE_PATH.LESSON_ADD)">
									<tm-icon customicon name="tmicon-plus"></tm-icon>
								</view>
								<view class=" pl-16 pr-16" @click="linkTo(ROUTE_PATH.LESSON_SETTING)">
									<tm-icon customicon name="tmicon-cog"></tm-icon>
								</view>
							</view>
						</template>
					</tm-navbar>
					<anydoorLessonDate :numBase="numBase" :colItemWidth="colItemWidth" :dateHeight="dateHeight"
						:currentShowWeeks="currentShowWeeks" :currentWeeks="currentWeeks">
					</anydoorLessonDate>
				</template>
				<template #content>
					<swiper ref="swiper" :current="defaultSwiperIndex" :duration="300" :style="{
						height: (rowItemHeight * rowNum) + numBase
					}" :circular="true" @change="updateSwiper">
						<swiper-item v-for="page in [0, 1, 2]" :key="page">
							<anydoorLessonView ref="pageList" :numBase="numBase" :colItemWidth="colItemWidth"
								:rowNum="rowNum" :rowItemHeight="rowItemHeight" :lessons="swiperData[page]" />
						</swiper-item>
					</swiper>
				</template>
			</anydoorPage>
		</view>
		<tm-message ref="msg"></tm-message>
	</tm-app>
</template>

<script setup lang="ts">
import tmApp from "@/tmui/components/tm-app/tm-app.vue"
import tmNavbar from "@/tmui/components/tm-navbar/tm-navbar.vue"
import anydoorLessonView from "@/components/anydoor-lesson-view/anydoor-lesson-view.vue"
import anydoorLessonDate from "@/components/anydoor-lesson-view/anydoor-lesson-date.vue"
import anydoorPage from "@/components/anydoor-page/anydoor-page.vue"
import tmMessage from "@/tmui/components/tm-message/tm-message.vue"
import tmIcon from "@/tmui/components/tm-icon/tm-icon.vue"
import {
	ref,
	computed,
	getCurrentInstance
} from "vue"
import IAnydoorLesson from '@/components/anydoor-lesson-view/IAnydoorLesson'
import Lesson from "@/common/database/Lesson/Lesson"
import {
	ILessonTempItemResult
} from "@/common/database/Lesson/ILesson"
import { useTmpiniaStore } from "@/tmui/tool/lib/tmpinia"
import { onLoad, onReady, onShow } from "@dcloudio/uni-app"
import { useLessonStore } from "@/store/lesson"
import { watch } from "vue"
import useJiaowuStore from "@/store/jiaowu"
import AnydoorText from "@/components/anydoor-text/anydoor-text.vue"
import { cloneDeep } from "lodash"
import { linkTo } from "@/common/utils/link"
import { ROUTE_PATH } from "@/router/ROUTE_PATH"
import theme from "@/tmui/tool/theme/theme"
const msg = ref<InstanceType<typeof tmMessage> | null>(null)
const store = useTmpiniaStore()

const lessonStore = useLessonStore()
const jiaowuStore = useJiaowuStore()

//下拉刷新是否完成
const refreshComplete = ref<boolean>(true)

// 页面刷新(刷新课程信息)
const refresh = async () => {
	refreshComplete.value = false
	try {
		const LessonInstance = await Lesson.getInstance()
		//刷新操作(当前的学期，从store里面取)
		await LessonInstance.freshTimeTable(lessonStore.semester)
		const data: any = await LessonInstance.getLessonList()
		lessonStore.lessonList = data || []
	} catch { }
	refreshComplete.value = true
}


//颜色
const redFont = computed(() => {
	const color = theme.getColor("redFont")
	// console.log(colortool.hsvaToRgba(store.tmStore.))
	return color.csscolor
})

/**ATART 子页面的配置 */
//时间栏目高度
const dateHeight = ref<number>(80)

//单位
const numBase = ref<string>('rpx')
//栏目数量
const colNum = ref<number>(8)
//栏目宽度
const colItemWidth = computed<number>(() => {
	return (750 / colNum.value)
})
//row的数量
const rowNum = ref<number>(10)

//一个row的高度
const rowItemHeight = ref<number>(150)

const lessons = ref<IAnydoorLesson[]>([])
/**END 子页面的配置 */

//页面的id
const pageId = ref<string>("page")
//当前的swiperId的索引
const defaultSwiperIndex = ref<number>(0)
const pageList = ref<Element[]>()

//swiper的数据
const swiperData = ref<IAnydoorLesson[][]>([
	[],
	[],
	[]
])

//当前显示的周次
const currentShowWeeks = ref<number>(1)
//当前的周次
const currentWeeks = computed(() => {
	return lessonStore.currentWeek
})
//最大的周次
const maxWeeks = ref<number>(36)

//当前的轮播索引
const currentSwiperIndex = ref<number>(0)

//上一周
const preWeek = () => {
	if (currentShowWeeks.value - 1 < 0) {
		currentShowWeeks.value = maxWeeks.value - 1
	} else currentShowWeeks.value = currentShowWeeks.value - 1
	updateSwiper({ detail: { current: currentSwiperIndex.value } })
}
//下一周
const nextWeek = () => {
	if (currentShowWeeks.value + 1 > maxWeeks.value) {
		currentShowWeeks.value = 0
	} else currentShowWeeks.value = currentShowWeeks.value + 1
	updateSwiper({ detail: { current: currentSwiperIndex.value } })
}


//更新客户曾
const updateLesson = (data: ILessonTempItemResult[]) => {
	lessons.value = data.map((item) => {
		return {
			name: item.name,
			teacher: item.teacher,
			position: item.position,
			week: item.week,
			weeks: item.weeks,
			semester: item.semester,
			time: item.time,
			color: item.color
		}
	})
	updateSwiper({ detail: { current: currentSwiperIndex.value } })
}
//去当前周次
const toCurrentWeek = () => {
	currentShowWeeks.value = lessonStore.currentWeek
	updateSwiper({ detail: { current: currentSwiperIndex.value } })
}

//更新swiper(current指的是当前所在的swiper)
const updateSwiper = (e: {
	detail: {
		current: number,
		source?: string
	}
}) => {
	//当前所在的swiper
	const current = e.detail.current
	//计算下一个的符号
	const s = current - currentSwiperIndex.value
	//当前的符号，如果是1就是加，-1就是减
	let r = 1
	//如果相等
	if (currentSwiperIndex.value === e.detail.current) r = 0
	//判断是加还是减
	currentSwiperIndex.value = current
	//更新信息,触发的是上一个
	if (s === -1 || s === 2) r = -1
	//更新展示的周次
	currentShowWeeks.value = (currentShowWeeks.value + r) % maxWeeks.value
	//最小值
	if (currentShowWeeks.value < 0) currentShowWeeks.value = maxWeeks.value - 1
	//最大值
	if (currentShowWeeks.value > maxWeeks.value - 1) currentShowWeeks.value = 1
	// 更新下一个
	const next: number = (current + 1) % 3
	const nextWeekShow: number = (currentShowWeeks.value + 1) % maxWeeks.value
	swiperData.value[next] = getCurrentWeekList(nextWeekShow)

	//更新上一个
	const pre = (current + 2) % 3
	let preWeekShow: number = currentShowWeeks.value - 1
	if (preWeekShow < 0) preWeekShow = 0
	swiperData.value[pre] = getCurrentWeekList(preWeekShow)

	//更新当前
	swiperData.value[current] = getCurrentWeekList(currentShowWeeks.value)

}

//获取当前周次的课程
const getCurrentWeekList = (week: number) => {
	// console.log(week)
	return lessons.value.filter((item) => item.weeks.includes(week))
}

//获取最新数据
const updateData = async () => {
	const LessonInstance = await Lesson.getInstance()
	const data: ILessonTempItemResult[] = await LessonInstance.getLessonList()
	console.log(data)
	lessonStore.lessonList = data || []
}


onReady(() => {
	//监听加载情况
	watch(() => lessonStore.initing, (val) => {
		if (val === true) {
			uni.$anydoor_native.Dialog_Module.showWaitingDialogSync({
				title: '加载中，请稍等'
			})
		} else {
			uni.$anydoor_native.Dialog_Module.hideWaitingDialogSync({})
		}
	}, { immediate: true })
})

onShow(async () => {
	updateData()
})


watch(() => lessonStore.lessonList, async (val: any[]) => {
	const LessonInstance = await Lesson.getInstance()
	//更新currentWeek
	await LessonInstance.setCurrentWeek()
	updateLesson(val)
})

//监听当前周次的变化
watch(currentWeeks, () => {
	toCurrentWeek()
}, { immediate: true })

</script>

<style lang="scss" scoped>
.lesson-bg {
	position: fixed;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
}
</style>
