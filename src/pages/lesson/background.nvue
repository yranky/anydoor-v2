<!--
 * @Author: yranky douye@douye.top
 * @Date: 2023-06-13 23:55:20
 * @LastEditors: yranky douye@douye.top
 * @LastEditTime: 2023-09-28 18:44:42
 * @FilePath: \anydoor-v2\src\pages\lesson\background.nvue
 * @Description: 课程表背景
 * 
 * Copyright (c) 2023 by anydoor.top|douyeblog.top, All Rights Reserved. 
-->
<template>
	<tm-app ref="app" color="whiteBg">
		<anydoorPage v-model:refresh-complete="refreshComplete" @refresh="getFirstPage" @loadmore="getNextPage">
			<template #navBar>
				<tm-navbar title="课程表背景"></tm-navbar></template>
			<template #content>
				<view style="margin: 10rpx 20rpx;">
					<anydoor-text text="当前" color="grey" margin="30rpx 5rpx 5rpx 5rpx"></anydoor-text>
					<view :style="{
						width: itemInfo.width + 'rpx',
						height: itemInfo.height + 'rpx',
						backgroundColor: (lessonStore.lessonBackground.type === LESSON_BACKGROUND_TYPE.COLOR ? lessonStore.lessonBackground.background : '')
					}">
						<image v-if="lessonStore.lessonBackground.type === LESSON_BACKGROUND_TYPE.IMAGE"
							:src="lessonStore.lessonBackground.fullPath" mode="aspectFill" />
					</view>
					<anydoor-text text="纯色背景" color="grey" margin="30rpx 5rpx 5rpx 5rpx"></anydoor-text>
					<anydoorColorPickerGroup>
						<anydoorColorPicker v-model:color="color" @color-change="setBackgroundFromColor($event)">
							<tm-button block label="选择颜色"></tm-button>
						</anydoorColorPicker>
					</anydoorColorPickerGroup>
					<anydoor-text text="图片背景" color="grey" margin="30rpx 5rpx 5rpx 5rpx"></anydoor-text>
					<view class="background-items">
						<view class="background-item" :style="{
							width: itemInfo.width + 'rpx',
							height: itemInfo.height + 'rpx',
							backgroundColor: 'rgba(0,0,0,.2)'
						}" @click="setBackgroundFromLocal">
							<anydoorText text="自定义" color="whiteBg" />
						</view>
						<template v-if="completed">
							<view class="background-item" :style="{
								width: itemInfo.width + 'rpx',
								height: itemInfo.height + 'rpx',
								backgroundColor: color,
								position: 'relative'
							}" v-for="(item, index) in wallpaperList" :key="index" @click="setBackgroundFromUrl(item)">
								<image :src="item.thumb" mode="aspectFill" />
								<!-- 背景 -->
								<view class="background-mask" :style="{
									width: itemInfo.width + 'rpx',
									height: itemInfo.height + 'rpx'
								}" @click.stop="download(item)" v-if="!existBackgroundId.includes(item.id) || item.downloading">
									<anydoorText :text="item.downloading ? '下载中' : '点击下载'" color="whiteBg" />
								</view>
							</view>
						</template>
					</view>
				</view>
			</template>
		</anydoorPage>
	</tm-app>
</template>

<script lang="ts" setup>
import tmApp from "@/tmui/components/tm-app/tm-app.vue"
import tmNavbar from "@/tmui/components/tm-navbar/tm-navbar.vue"
import { onLoad, onReachBottom } from "@dcloudio/uni-app"
import { computed, ref } from "vue"
import tmButton from "@/tmui/components/tm-button/tm-button.vue"
import anydoorColorPicker from "@/components/anydoor-color-picker/anydoor-color-picker.vue"
import anydoorColorPickerGroup from "@/components/anydoor-color-picker/anydoor-color-picker-group.vue"
import { listWallpaper } from "@/common/service/wallpaper"
import anydoorPage from "@/components/anydoor-page/anydoor-page.vue"
import { onMounted } from "vue"
import anydoorText from "@/components/anydoor-text/anydoor-text.vue"
import Lesson from "@/common/database/Lesson/Lesson"
import DialogModule from "@/common/native/dialog/DialogModule"
import ToastModule from "@/common/native/toast/ToastModule"
import { copyTo, deleteFileByFullPath, getDirectory, getFiles } from "@/common/utils/ioUtils"
import { useLessonStore } from "@/store/lesson"
import { LESSON_BACKGROUND_TYPE } from "@/common/database/Lesson/ILesson"

//宽高比
const scale = ref<number>(3)

//是否加载已经下载的内容完成
const completed = ref<boolean>(false)

//选中的颜色
const color = ref<string>("#fff")
//已经存在的
const existData = ref([])

//背景store
const lessonStore = useLessonStore()


//加载大小
onLoad(() => {
	const sysInfo = uni.getSystemInfoSync()
	scale.value = sysInfo.windowHeight / sysInfo.windowWidth
})

//获取宽高
const itemInfo = computed(() => {
	return {
		width: 196,
		height: scale.value * 196
	}
})

onLoad(() => {
	//获取第一页
	getFirstPage()
	//获取下载的列表
	getBackgroundList()
})

//设置背景
const setBackgroundFromLocal = async () => {
	uni.chooseImage({
		count: 1,
		success(res) {
			//先转成相对路径 /storage
			const path = plus.io.convertAbsoluteFileSystem(res.tempFilePaths[0])
			//新路径
			const newPath: string = `lesson_bg_${Math.random()}_${Date.now()}.bg`
			let toEntryObj: PlusIoDirectoryEntry
			//获取文件夹entry
			getDirectory("lesson/resource", plus.io.PUBLIC_DOCUMENTS, true).then(toEntry => {
				toEntryObj = toEntry
				return getDirectory(path)
			}).then(async fileEntry => {
				//首先删除已经有的
				try {
					await deleteFileByFullPath(lessonStore.lessonBackground.fullPath || "")
				} catch { }
				//复制
				return copyTo(fileEntry, toEntryObj, newPath)
			}).then(() => {
				return Lesson.getInstance()
				//获取lesson实例
			}).then(lesson => {
				//成功
				lesson.setBackground('-1', LESSON_BACKGROUND_TYPE.IMAGE, toEntryObj.fullPath + newPath)
			}).then(() => {
				ToastModule.show({ text: "设置成功!" })
			}).catch(err => {
				const errStr = (typeof err !== "object" ? err : JSON.stringify(err));
				//上报错误
				uni.$anydoor_native.Tool_Module.postErrorSync({
					content: errStr
				})
				//打标记
				uni.$anydoor_native.Bugly_Module.pushDataSync({
					key: "setBackground error",
					value: errStr
				})
				ToastModule.show({ text: '设置失败!' + errStr })
			})
		}
	})
}

//设置背景
const setBackgroundFromUrl = async (item: any) => {
	try {
		uni.$anydoor_native.Dialog_Module.showMessageDialog({
			title: '提示',
			content: '确定设置背景吗?',
			okText: '确定',
			cancelText: '取消'
		}, (res) => {
			if (res.data?.type == "ok") {
				//确定
				uni.$anydoor_native.Dialog_Module.showWaitingDialogSync({})
				const newPath: string = `lesson_bg_${Math.random()}_${Date.now()}.bg`
				try {
					//遍历找到那个item
					const wallpaper: any = existData.value.find((exist: any) => exist.id == item.id)
					let toEntryObj: PlusIoDirectoryEntry
					if (wallpaper) {
						//获取目的目录
						getDirectory("lesson/resource", plus.io.PUBLIC_DOCUMENTS, true).then(toEntry => {
							toEntryObj = toEntry
							return getDirectory(wallpaper.filename)
							//源文件
						}).then(async fileEntry => {
							//首先删除已经有的
							try {
								await deleteFileByFullPath(lessonStore.lessonBackground.fullPath || "")
							} catch { }
							//复制
							return copyTo(fileEntry, toEntryObj, newPath)
							//成功
						}).then(() => {
							return Lesson.getInstance()
							//获取lesson实例
						}).then(lesson => {
							//成功
							lesson.setBackground(wallpaper.id, LESSON_BACKGROUND_TYPE.IMAGE, toEntryObj.fullPath + newPath)
						}).then(() => {
							ToastModule.show({ text: "设置成功!" })
						}).catch(err => {

							const errStr = (typeof err !== "object" ? err : JSON.stringify(err));
							//上报错误
							uni.$anydoor_native.Tool_Module.postErrorSync({
								content: errStr
							})
							//打标记
							uni.$anydoor_native.Bugly_Module.pushDataSync({
								key: "setBackground error",
								value: errStr
							})

							ToastModule.show({ text: err })
						}).finally(() => {
							uni.$anydoor_native.Dialog_Module.hideWaitingDialogSync({})
						})
					} else {
						ToastModule.show({ text: '设置失败!背景不存在' })
					}
				} catch {
					uni.$anydoor_native.Dialog_Module.hideWaitingDialogSync({})
				}
			}
		})
	} catch { }
}
//从颜色设置背景
const setBackgroundFromColor = async (item: string) => {
	uni.$anydoor_native.Dialog_Module.showMessageDialog({
		title: '提示',
		content: '确定设置背景吗?',
		okText: '确定',
		cancelText: '取消'
	}, (res) => {
		if (res.data?.type == "ok") {
			uni.$anydoor_native.Dialog_Module.showWaitingDialogSync({});
			//设置color背景
			Lesson.getInstance().then(lesson => {
				return lesson.setBackground(item, LESSON_BACKGROUND_TYPE.COLOR)
			}).then(() => {
				ToastModule.show({ text: "设置成功!" })
			}).finally(() => {
				uni.$anydoor_native.Dialog_Module.hideWaitingDialogSync({})
			})
		}
	})
}



//已经存在的背景的id
const existBackgroundId = computed(() => {
	return existData.value.map((item: any) => {
		return Number(item.id || -1)
	})
})

//下载
const download = async (item: any) => {
	if (item.downloading) return
	item.downloading = true;
	//执行下载并加入数据库操作
	await (await Lesson.getInstance()).downloadBackground(item.id, item.thumb, item.url)
	//更新下载的列表
	await getBackgroundList()
	item.downloading = false
}

//获取下载的列表
const getBackgroundList = async () => {
	existData.value = await (await Lesson.getInstance()).getBackgroundList() || []
	console.log(existData.value)
	completed.value = true
}


const currentPage = ref<number>(1)
const pageSize = ref<number>(5)
const wallpaperList = ref<any[]>([])
const refreshComplete = ref<boolean>(true)
//当前页
const getFirstPage = async () => {
	refreshComplete.value = false
	try {
		currentPage.value = 1
		const data = await listWallpaper({
			limit: pageSize.value,
			page: currentPage.value
		})
		if (data && data.length > 0) {
			wallpaperList.value = data
		}
	} catch { }
	refreshComplete.value = true
}
//下一页
const getNextPage = async () => {
	refreshComplete.value = false
	try {
		const data = await listWallpaper({
			limit: pageSize.value,
			page: currentPage.value + 1
		})
		if (data && data.length > 0) {
			wallpaperList.value = wallpaperList.value.concat(data)
			currentPage.value = currentPage.value + 1
		}
	} catch { }
	refreshComplete.value = true
}

</script>
<style scoped lang="scss">
.background-items {
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	align-items: center;
	text-align: center;

	.background-item {
		margin: 20rpx;
		text-align: center;
		align-items: center;
		display: flex;
		flex-direction: row;
		justify-content: center;
		position: relative;

		&:nth-child(1) {
			margin: 20rpx 0;
		}

		&:nth-child(1) {
			margin: 20rpx 0;
		}

		.background-mask {
			position: absolute;
			align-items: center;
			justify-content: center;
			display: flex;
			background-color: rgba(0, 0, 0, .3);
		}
	}
}
</style>