<template>
	<tm-app ref="app" color="whiteBg">
		<anydoorPage @loadmore="loadmore" v-model:refresh-complete="refreshComplete" @refresh="retryList(true)">
			<template #navBar>
				<tm-navbar title="通知列表"></tm-navbar>
			</template>
			<template #content>
				<list>
					<cell v-for="item in limit" :key="item" v-if="!firstLoadComplete&&noticeList.length===0">
						<view style="margin: 0 20rpx;">
							<tm-skeleton-line :height="100"></tm-skeleton-line>
						</view>
					</cell>
					<cell v-for="item in noticeList" :key="item.id" @click="toNoticeDetail(item)">
						<anydoorNewsItem :title="item.title" :infoList="[item.date, item.author]">
						</anydoorNewsItem>
					</cell>
					<cell v-if="firstLoadComplete">
						<anydoor-load-more :status="loadmoreStatus" @loadmore="loadmore" />
					</cell>
				</list>
			</template>
		</anydoorPage>
	</tm-app>
</template>

<script lang="ts" setup>
import tmApp from "@/tmui/components/tm-app/tm-app.vue"
import tmNavbar from "@/tmui/components/tm-navbar/tm-navbar.vue"
import anydoorNewsItem from "@/components/anydoor-news-item/anydoor-news-item.vue"
import anydoorPage from "@/components/anydoor-page/anydoor-page.vue"
import tmSkeletonLine from "@/tmui/components/tm-skeleton-line/tm-skeleton-line"
import {
	ref,
	getCurrentInstance,
	nextTick
} from "vue"
import { listNotice } from "@/common/service/notice"
import { onLoad } from "@dcloudio/uni-app"
import { diffTwoDays } from "@/common/utils/date"
import { debounce } from "lodash"
import anydoorLoadMore from "@/components/anydoor-loadmore/anydoor-loadmore.vue"
import CODE from "@/common/define/code"
import ANYDOOR_LOADMORE_STATUS from "@/components/anydoor-loadmore/IAnydoorLoadmore"
import {noticeFilter, toNoticeDetail} from "@/common/utils/notice"
import useJiaowuStore from "@/store/jiaowu"
const {
	proxy
} = getCurrentInstance()
// #ifdef APP-NVUE
// const dom = uni.requireNativePlugin('dom')
//page的高度
// const pageHeight = ref(0)
// #endif
const jiaowuStore=useJiaowuStore()

//首次加载完成
const firstLoadComplete = ref<boolean>(false)
//下拉刷新是否完成
const refreshComplete = ref<boolean>(true)
//加载更多是否完成
const loadmoreStatus = ref<number>(ANYDOOR_LOADMORE_STATUS.MORE)

onLoad(() => {
	//加载通知列表
	getNoticeList()
})

//重新加载
const retryList = (isRefresh: boolean = false) => {
	if (isRefresh) {
		firstLoadComplete.value = false
		//清空列表
		noticeList.value.splice(0, noticeList.value.length)
		//还原page
		page.value = 1
	}
	getNoticeList()
}
//加载更多
const loadmore = debounce(() => {
	if (loadmoreStatus.value !== ANYDOOR_LOADMORE_STATUS.LOADING) {
		loadmoreStatus.value = ANYDOOR_LOADMORE_STATUS.LOADING
		getNoticeList(noticeList.value.length === 0 ? 1 : (page.value + 1))
	}
}, 300)

//通知列表
const noticeList = ref<any>([])
//当前页码
const page = ref<number>(1)
//当前一页限制个数，一页10个
const limit = ref<number>(10)
//获取通知列表
const getNoticeList = debounce(async (morePage?: number): Promise<void> => {
	try {
		const data = await listNotice({
			page: morePage !== undefined ? morePage : page.value,
			limit: limit.value,
			cid: jiaowuStore.jiaowuConfig.cid
		})
		if (data.code === CODE.SUCCESS) {
			data.data.forEach((item: any) => {
				noticeList.value.push(noticeFilter(item))
			})
			//页数变化
			if (morePage !== undefined && data.data.length !== 0) page.value = morePage
			//没有更多了
			if (data.data.length === 0) loadmoreStatus.value = ANYDOOR_LOADMORE_STATUS.NOMORE
			//还有
			else loadmoreStatus.value = ANYDOOR_LOADMORE_STATUS.MORE
		} else {
			loadmoreStatus.value = ANYDOOR_LOADMORE_STATUS.MORE
		}
	} catch {
		loadmoreStatus.value = ANYDOOR_LOADMORE_STATUS.MORE
	}
	//首次加载完成
	firstLoadComplete.value = true
	refreshComplete.value = true
}, 500)
</script>

<style scoped lang="scss"></style>
