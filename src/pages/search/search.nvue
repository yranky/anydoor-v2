<template>
	<tm-app ref="app" color="whiteBg">
		<anydoor-delay :time="25">
			<!-- 顶部搜索栏 -->
			<tm-navbar :rightWidth="0" :leftWidth="100">
				<template v-slot:default>
					<view class="flex flex-nowrap flex-row">
						<view class="index-input" style="width: 550rpx;">
							<tm-input prefix="tmicon-search" searchLabel="" :followTheme="false" transprent :style="{
								backgroundColor: store.tmStore.dark ? 'rgba(255,255,255,.15)' : 'rgba(0,0,0,.03)'
							}" :focus="true" @focus="inputFocus = true" @blur="inputFocus = false" class=" round-5" @confirm="doSearch"
								@search="doSearch" v-model="keyword" placeholder="搜索模块" confirmType="search"></tm-input>
						</view>
						<view class="flex flex-center" style="width: 100rpx;" @click="doSearch()">
							<anydoor-text text="搜索" :color="inputFocus ? 'primary' : 'grey'"></anydoor-text>
						</view>
					</view>
				</template>
			</tm-navbar>
			<!-- 搜索记录 -->
			<tm-sheet :padding="[0, 0]" :margin="[0, 15, 20, 15]" class=" round-5" v-if="keywordHistoryList.length > 0">
				<anydoor-label labelText="历史记录" :rectSize="0" rectColor="primary" :actionFontSize="27">
					<template v-slot:action>
						<tm-icon name="tmicon-delete-fill" color="grey" :fontSize="30" @click="clearHistory"></tm-icon>
					</template>
				</anydoor-label>
				<view class="search-history flex flex-wrap flex-row">
					<tm-sheet _class="search-history-item flex flex-nowrap flex-row" class=" round-3" color="primary" text
						:margin="[10, 0]" :padding="[0, 0]" v-for="(item, index) in keywordHistoryList" :key="index">
						<view class="flex-1" @click="doSearch(item.keyword)">
							<anydoor-text margin="0 20rpx" :lines="1" :text="item.keyword" :fontSize="25" lineHeight="30"
								color="primary">
							</anydoor-text>
						</view>
						<tm-icon _class="mr-n2" name="tmicon-times" color="primary" :fontSize="20"
							@click="removeHistory(item.keyword)"></tm-icon>
					</tm-sheet>
				</view>
			</tm-sheet>
			<!-- 热门推荐 -->
			<!-- <anydoor-delay :time="100">
				<tm-sheet :padding="[0,0]" :margin="[0,15]" class=" round-5" transprent>
					<anydoor-label labelText="热门推荐" :rectSize="0" rectColor="primary" :actionFontSize="0">
						<template v-slot:action>
							<text></text>
						</template>
					</anydoor-label>
					<tm-scrollx class="flex flex-nowrap flex-row" :width="750" :height="80 * 15+50" color="primary"
						:showBar="false">
						<view class="recommend-box round-5" v-for="itemitem in 10" :key="itemitem"
							style="background-image: linear-gradient(to bottom, rgba(64, 169, 255, .1), rgba(102, 255, 0, 0));">
							<anydoor-text text="标题" color="primary" :lines="1" lineHeight="50" :fontSize="25" bold
								style="margin: 0 20rpx;">
							</anydoor-text>
							<view class="flex flex-col recommend">
								<view class="recommend-item flex flex-row flex-nowrap" v-for="item in 15" :key="item">
									<view class="recommend-item-num flex flex-nowrap">
										<anydoor-text :text="item+''" color="white" :lines="1" lineHeight="50"
											:fontSize="25" bold style="text-align: center;">
										</anydoor-text>
									</view>
									<anydoor-text class="flex-1 recommend-item-content flex flex-nowrap"
										text="功能功能功能功能功能功能功能功能功能功能功能功能功能功能功能功能功能功能功能功能功能功能功能功能功能功能功能功能1" :lines="1"
										lineHeight="65" :fontSize="25"></anydoor-text>
									<tm-tag text size="xs" label="飙升" :margin="[5,20]" color="primary3"></tm-tag>
								</view>
							</view>
						</view>
					</tm-scrollx>
				</tm-sheet>
			</anydoor-delay> -->
		</anydoor-delay>
	</tm-app>
</template>

<script lang="ts" setup>
import tmApp from "@/tmui/components/tm-app/tm-app.vue"
import tmInput from "@/tmui/components/tm-input/tm-input.vue"
import tmSheet from "@/tmui/components/tm-sheet/tm-sheet.vue"
import tmIcon from "@/tmui/components/tm-icon/tm-icon.vue"
import tmNavbar from "@/tmui/components/tm-navbar/tm-navbar.vue"
import tmScrollx from "@/tmui/components/tm-scrollx/tm-scrollx.vue"
import anydoorText from "@/components/anydoor-text/anydoor-text.vue"
import anydoorLabel from "@/components/anydoor-label/anydoor-label.vue"
import tmTag from "@/tmui/components/tm-tag/tm-tag.vue"
import anydoorDelay from "@/components/anydoor-delay/anydoor-delay.vue"
import {
	useTmpiniaStore
} from '@/tmui/tool/lib/tmpinia'
import {
	computed,
	ref,
	watch
} from "vue"
import {
	onShow,
	onHide,
	onReady
} from "@dcloudio/uni-app"
import ToastModule from "@/common/native/toast/ToastModule"
import { UNI_STORAGE } from "@/common/database/UNI_STORAGE"
import { linkTo } from "@/common/utils/link"
import { ROUTE_PATH } from "@/router/ROUTE_PATH"

//store
const store = useTmpiniaStore()
//聚焦
const inputFocus = ref(true)

//搜索关键词
const keyword = ref<string>('')


//搜索关键词历史
interface IKeywordHistory {
	keyword: string,
	time: number
}
const keywordHistory = ref<IKeywordHistory[]>([])
//搜索关键词历史
const keywordHistoryList = computed(() => {
	return keywordHistory.value.map(item => {
		return {
			keyword: item.keyword,
			time: item.time
		}
	})
})

//搜索
const doSearch = (word?: string) => {
	const value = typeof word === "string" ? word.trim() : keyword.value.trim()
	if (value === "") ToastModule.show({ text: '请输入关键词' })
	else {
		//执行搜索操作
		setStorageHistory(value)
		//搜索关键词
		linkTo(ROUTE_PATH.SEARCH_LIST, {
			keyword: value
		}, {}, false, {
			animationType: "fade-in"
		})
	}
}

//加载历史
const loadKeywordHistory = () => {
	keywordHistory.value = uni.getStorageSync(UNI_STORAGE.SEARCH_KEYWORD_HISTORY) || []
}
//设置历史
const setStorageHistory = (keyword: string) => {
	//要先去掉已经有的
	keywordHistory.value = keywordHistory.value.filter(item => item.keyword !== keyword)
	//再向前插入
	keywordHistory.value.unshift({
		keyword,
		time: new Date().getTime()
	})
	//报错
	uni.setStorageSync(UNI_STORAGE.SEARCH_KEYWORD_HISTORY, keywordHistory.value)
	//自动重新加载
	loadKeywordHistory()
}
//移除一个
const removeHistory = (keyword: string) => {
	keywordHistory.value = keywordHistory.value.filter(item => item.keyword !== keyword)
	uni.setStorageSync(UNI_STORAGE.SEARCH_KEYWORD_HISTORY, keywordHistory.value)
	//自动重新加载
	loadKeywordHistory()

}
//清空历史
const clearHistory = () => {
	//先提示
	uni.$anydoor_native.Dialog_Module.showMessageDialog({
		okText: '确定',
		cancelable: true,
		cancelText: '取消',
		title: '提示',
		content: '确定清空吗?'
	}, (res) => {
		//执行清空操作
		if (res.data?.type === "ok") {
			uni.setStorageSync(UNI_STORAGE.SEARCH_KEYWORD_HISTORY, [])
			//自动重新加载
			loadKeywordHistory()
		}
	})
}


//每次显示都从storage里面加载
onShow(() => {
	//每次都从历史加载
	loadKeywordHistory()
})

</script>

<style lang="scss" scoped>
.search-history {
	margin: 10rpx 30rpx;

	.search-history-item {
		max-width: 600rpx;
		margin: 10rpx;
	}
}

.recommend-box {
	width: 550rpx;
	margin: 0 25rpx;

	.recommend {

		.recommend-item {
			width: 550rpx;
			padding: 0 10rpx;
			margin: 5rpx 0;

			.recommend-item-num {
				width: 50rpx;
				height: 50rpx;
				margin: 10rpx;
				background-color: aqua;
				text-align: center;
				border-radius: 10rpx;
			}

			.recommend-item-content {
				width: 420rpx;
			}
		}
	}
}
</style>
