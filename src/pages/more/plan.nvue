<!--
 * @Author: yranky douye@douye.top
 * @Date: 2022-08-08 10:12:17
 * @LastEditors: yranky douye@douye.top
 * @LastEditTime: 2023-10-21 23:07:35
 * @FilePath: \anydoor-v2\src\pages\more\plan.nvue
 * @Description: 教学计划
 * 
 * Copyright (c) 2023 by anydoor.top|douyeblog.top, All Rights Reserved. 
-->
<template>
	<tm-app ref="app" color="whiteBg">
		<anydoorPage v-model:refresh-complete="refreshComplete" @refresh="refresh">
			<template #navBar>
				<tm-navbar title="教学计划" :right-width="300">
					<template #right>
						<anydoor-item-picker-group>
							<anydoor-item-picker :list="semester" v-model:value="semesterSelect">
								<anydoor-text class="flex-2" :text="semesterSelect" :lines="1"
									style="margin:0 39rpx;text-align: right;"></anydoor-text>
							</anydoor-item-picker>
						</anydoor-item-picker-group>
					</template>
				</tm-navbar>
			</template>
			<template #content>
				<!-- 加载中提示 -->
				<tm-icon name="tmicon-shuaxin" :spin="true" v-if="status.loading"></tm-icon>
				<!-- <tm-modal v-for="item in dataFilter" :key="item[0]" :height="800" okText="确认">
					<template v-slot:trigger>
						<tm-card status="" :title="item[lessonNameIndex]"></tm-card>
					</template>
					<tm-cell v-for="(value, index) in tags" :key="value" :margin="[0, 0]" :rightText="item[index]"
						:titleFontSize="32" :title="value" rightIcon=""> </tm-cell>
				</tm-modal> -->

				<view class="plan-item" v-for="item in dataFilter" :key="item[0]" @click="linkTo(ROUTE_PATH.COMMON_DETAIL, {
					item: item,
					tag: tags.slice(0, tags.length - 1)
				})">
					<view class="plan-item-title">
						<anydoor-text :text="item[lessonNameIndex]" :fontSize="30" :lines="1"></anydoor-text>
						<view class="plan-item-tags">
							<template v-for="tagItem in lessonTagsIndex" :key="tagItem.index" >
								<tm-tag text outlined :shadow="0" :color="tagItem.color" size="xs" v-if="item[tagItem.index]" :label="item[tagItem.index]"></tm-tag>
							</template>
						</view>
					</view>
					<view class="plan-item-next">
						<tm-icon name="tmicon-angle-right" color="grey" :font-size="26"></tm-icon>
					</view>
				</view>

				<tm-result v-if="dataFilter.length === 0 && !status.loading" :showBtn="false" subTitle="暂无数据"
					title="暂无数据"></tm-result>
			</template>
		</anydoorPage>
	</tm-app>
</template>

<script lang="ts" setup>
import tmApp from "@/tmui/components/tm-app/tm-app.vue"
import tmNavbar from "@/tmui/components/tm-navbar/tm-navbar.vue"
import tmCard from "@/tmui/components/tm-card/tm-card.vue"
import anydoorPage from "@/components/anydoor-page/anydoor-page.vue"
import tmText from "@/tmui/components/tm-text/tm-text.vue"
import tmFilterMenu from "@/tmui/components/tm-filterMenu/tm-filterMenu.vue"
import tmFilterMenuItem from "@/tmui/components/tm-filterMenu-item/tm-filterMenu-item.vue"
import { ref } from "vue"
import useJiaowuStore from "@/store/jiaowu"
import Encrypt from "@/common/encrypt/Encrypt"
import { jwConfig, jwPlan } from "@/common/service/jw"
import CODE from "@/common/define/code"
import { UNI_STORAGE } from "@/common/database/UNI_STORAGE"
import { onLoad } from "@dcloudio/uni-app"
import { computed } from "vue"
import tmRadioGroup from "@/tmui/components/tm-radio-group/tm-radio-group.vue"
import tmRadio from "@/tmui/components/tm-radio/tm-radio.vue"
import tmIcon from "@/tmui/components/tm-icon/tm-icon.vue"
import { watch } from "vue"
import tmModal from "@/tmui/components/tm-modal/tm-modal.vue"
import tmCell from "@/tmui/components/tm-cell/tm-cell.vue"
import tmResult from "@/tmui/components/tm-result/tm-result.vue"
import { linkTo } from "@/common/utils/link"
import { ROUTE_PATH } from "@/router/ROUTE_PATH"
import tmTag from '@/tmui/components/tm-tag/tm-tag.vue'


import dayjs from "dayjs"
const store = useJiaowuStore()

const filter = ref(null)

//下拉刷新是否完成
const refreshComplete = ref<boolean>(true)
// 页面刷新
const refresh = async () => {
	refreshComplete.value = false
	await getPlan()
	refreshComplete.value = true
}

//加载中
const status = ref({
	loading: true
})

const tags = ref([])
const datas = ref([])

const semesterSelect = ref("学期选择")

const updateTime = ref(0)

watch(semesterSelect, () => {
	//关闭选择框
	filter.value && (filter.value as any).close()
	//保存到storage
	uni.setStorageSync(UNI_STORAGE.JW_PLAN_SEMESTER, semesterSelect.value)
})

// 数据
const dataFilter = computed(() => {
	const tagIndex = tags.value.findIndex((item: string) => item.indexOf("学期") > -1) || 0
	const data = datas.value.filter(item => {
		return item[tagIndex] === semesterSelect.value
	})
	return data
})

// 学期的分类
const semester = computed(() => {
	const tagIndex = tags.value.findIndex((item: string) => item.indexOf("学期") > -1) || 0
	//分类
	const type = datas.value.map((item: any) => {
		return item[tagIndex]
	})
	return [...new Set(type)]
})

//课程名称的索引
const lessonNameIndex = computed(() => {
	console.log(tags.value)
	return tags.value.findIndex((item: any) => item.indexOf("名称") > -1) || 0
})

//tag
const lessonTagsIndex = computed(() => {
	const tagsIndex: {
		index: number,
		color: string
	}[] = [];

	const lessonExam = tags.value.findIndex((item: any) => item.indexOf("考核方式") > -1) || -1
	if (lessonExam > -1) tagsIndex.push({
		index: lessonExam,
		color: 'primary2'
	})

	const lessonType = tags.value.findIndex((item: any) => item.indexOf("课程性质") > -1) || -1
	if (lessonType > -1) tagsIndex.push({
		index: lessonType,
		color: 'primary3'
	})

	const lessonExamType = tags.value.findIndex((item: any) => item.indexOf("课程属性") > -1) || -1
	if (lessonExamType > -1) tagsIndex.push({
		index: lessonExamType,
		color: 'primary3'
	})

	return tagsIndex
})

onLoad(() => {
	loadCache()
	checkNeedUpdate() ? getPlan() : ''
})

//判断是否需要更新
const checkNeedUpdate = (): boolean => {
	const updateTimeDayjs = dayjs(updateTime.value)
	if (dayjs().diff(updateTimeDayjs, "day") > store.jiaowuConfig.plan_temp || !updateTimeDayjs.isValid()) {
		return true
	}
	return false
}

const loadCache = () => {
	//首先读取缓存
	try {
		//读取轮播图列表缓存
		const plan = uni.getStorageSync(UNI_STORAGE.JW_PLAN)
		const plan_semester = uni.getStorageSync(UNI_STORAGE.JW_PLAN_SEMESTER)
		if (plan) {
			tags.value = plan.tag || []
			datas.value = plan.data || []
			updateTime.value = plan.update_time || 0
		}
		if (plan_semester) {
			semesterSelect.value = plan_semester
		}
		if (plan) {
			status.value.loading = false
		}
	} catch { }
}

//获取教学计划
const getPlan = async () => {
	const username = store.jiaowuAccount.username
	const password = store.jiaowuAccount.password

	const encrypt = new Encrypt()

	//教务配置重新护球
	const jw_config_data = await jwConfig({
		cid: store.jiaowuConfig.cid
	})
	//未成功，终止流程
	if (jw_config_data.code !== CODE.SUCCESS) {
		status.value.loading = false
		return
	}
	encrypt.setPublicKey(jw_config_data.data.public_key)
	const password_encrypt = encrypt.encrypt(password)

	const data = await jwPlan({
		username,
		password: password_encrypt,
		cid: store.jiaowuConfig.cid
	})
	if (data.code === CODE.SUCCESS) {
		tags.value = data.data.tag
		datas.value = data.data.data
		uni.setStorageSync(UNI_STORAGE.JW_PLAN, {
			"update_time": dayjs().format("YYYY/MM/DD HH:mm:ss"),
			"tag": data.data.tag || [],
			"data": data.data.data || []
		})
	}
	//加载中去掉
	status.value.loading = false
}

</script>

<style lang="scss" scoped>
.plan-item {
	display: flex;
	flex-direction: row;
	margin: 10rpx 30rpx;
	padding: 10rpx 0;
	align-items: center;

	.plan-item-title {
		flex: 1;
		margin: 0 10rpx;

		.plan-item-tags {
			display: flex;
			flex-direction: row;
		}
	}

	.plan-item-next {
		width: 80rpx;
	}
}
</style>
