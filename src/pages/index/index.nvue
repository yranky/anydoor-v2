<template>
	<tm-app ref="app" color="whiteBg">
		<anydoorPage v-model:refresh-complete="refreshComplete" @refresh="refresh">
			<template #navBar>
				<view class="bg" :style="{
					backgroundImage: headerBg,
					paddingBottom: '35rpx'
				}">
					<!-- 顶部搜索栏 -->
					<view class="index-navbar-box fixed l-0 t-0" ref="navbar" :style="{
						backgroundColor: navbarBg
					}">
						<view class="index-navbar flex flex-row flex-nowrap" :style="{
							paddingTop: statusBarHeight
						}">
							<text class="index-day" :style="{
								color: store.tmStore.dark ? 'rgba(252, 252, 252, 1.0)' : 'rgba(34, 34, 34, 1.0)',
								lineHeight: '60rpx'
							}">{{ jiaowuStore.jiaowuConfig.school_name }}</text>
							<view class="index-input flex-1">
								<tm-input prefix="tmicon-search" searchLabel="" :followTheme="false" transprent :style="{
									backgroundColor: store.tmStore.dark ? 'rgba(255,255,255,.15)' : 'rgba(0,0,0,.03)'
								}" disabled @click="toSearch" class=" round-5"></tm-input>
							</view>
							<view class="index-icons flex flex-row flex-nowrap">
								<view class="index-icon" @click="Scan.indexScan()">
									<tm-icon name="tmicon-scan" :fontSize="40"></tm-icon>
								</view>
							</view>
						</view>
					</view>
					<!-- 填充占位元素 -->
					<view :style="{ width: '100%', height: statusBarHeight, marginTop: '60rpx' }"></view>
				</view>
			</template>
			<template #content>
				<!-- 轮播 -->
				<view class="index-carousel-box round-5" style="margin: 35rpx;" v-if="swiperList.length > 0">
					<tm-carousel rangKey="img" autoplay dotPosition="bottom" model="dot" :round="5" :width="680"
						:height="350" :list="swiperList" align="left" @click="toSwiperDetail"></tm-carousel>
				</view>
				<!-- 全局提醒组件 -->
				<tm-alert class=" round-5" :shadow="2" text :content="tipList" color="primary" :closable="false"
					:height="80" :max-length="1" v-if="tipList.length > 0"></tm-alert>

				<!-- 功能列表 -->
				<tm-scrollx :width="750" :height="140" color="primary" transprent v-if="menuList.length > 0">
					<tm-grid :col="menuList.length" :width="150 * menuList.length" transprent>
						<tm-grid-item v-for="(item, index) in menuList" :key="index" :width="140" :height="140"
							:count="item.count" @click="menuLink(item)">
							<tm-image :width="79" :height="79" :src="item.path"></tm-image>
							<tm-text :font-size="24" :label="item.title"></tm-text>
						</tm-grid-item>
					</tm-grid>
				</tm-scrollx>

				<!-- 今日课程 -->
				<view style="margin: 15rpx 10rpx;">
					<view class="lesson-tips flex flex-nowrap flex-row">
						<anydoor-text :text="todayTimeStr" class="flex-1" lineHeight="50" :fontSize="30" color="primary2"
							:lines="1" bold style="margin:0 20rpx"></anydoor-text>
						<anydoor-text class="flex-2" text="" :fontSize="25" lineHeight="50" color="grey" :lines="1"
							style="margin:0 20rpx;text-align: right;"></anydoor-text>
					</view>
					<anydoor-index-lesson v-for="item in currentDayLessonList" :dotColor="item.color"
						:time="'第' + item.time.join(',') + '节'" :lessonName="item.name"
						:lessonRoom="item.position"></anydoor-index-lesson>
					<!-- <anydoor-index-lesson time="第2-4节" dotColor="#ff2414" lessonName="高等数学A12" lessonRoom="xxx楼702">
					</anydoor-index-lesson>
					<anydoor-index-lesson time="第2-4节" dotColor="#ff2414" lessonName="高等数学A12" lessonRoom="xxx楼702">
					</anydoor-index-lesson>
					<anydoor-index-lesson time="第2-4节" dotColor="#ff2414" lessonName="高等数学A12" lessonRoom="xxx楼702">
					</anydoor-index-lesson>
					<anydoor-index-lesson time="第2-4节" dotColor="#ff2414" lessonName="高等数学A12" lessonRoom="xxx楼702">
					</anydoor-index-lesson> -->
					<tm-icon name="tmicon-shuaxin" :spin="true" v-if="currentDayLessonLoading"></tm-icon>
					<tm-divider align="center" label="今天没课~~~"
						v-if="currentDayLessonList.length === 0 && !currentDayLessonLoading"></tm-divider>
				</view>

				<!-- 通知 -->
				<view style="padding: 10rpx 0;margin: 15rpx;">
					<anydoor-label labelText="校园通知" rectColor="primary" :actionFontSize="27"
						@click="linkTo(ROUTE_PATH.NOTICE_LIST)"></anydoor-label>
					<template v-if="!noticeComplete">
						<anydoorNewsItem :skeleton="true" v-for="item in 5" :key="item"></anydoorNewsItem>
					</template>
					<anydoorNewsItem v-for="item in noticeList" :key="item.id" @click="toNoticeDetail(item)"
						:title="item.title" :infoList="[item.date, item.author]">
					</anydoorNewsItem>
				</view>

				<!-- 新闻 -->
				<view style="padding: 10rpx 0;margin: 15rpx;">
					<anydoor-label labelText="文章" rectColor="primary" :actionFontSize="27"
						@click="linkTo(ROUTE_PATH.ARTICLE_LIST)"></anydoor-label>
					<anydoorNewsItem :skeleton="true" v-if="!articleComplete"></anydoorNewsItem>
					<anydoorNewsItem v-for="item in articleList" :key="item.id" @click="toArticleDetail(item)"
						:title="item.title"
						:infoList="[item.date, item.author, ...((item.tag || '').split(',')).join(' ')]">
					</anydoorNewsItem>
				</view>
			</template>
		</anydoorPage>
	</tm-app>
</template>
<script lang="ts" setup>
import {
	onReady,
	onPageScroll,
	onShow,
	onLoad
} from "@dcloudio/uni-app"
import tmApp from "@/tmui/components/tm-app/tm-app.vue"
import tmInput from "@/tmui/components/tm-input/tm-input.vue"
import tmIcon from "@/tmui/components/tm-icon/tm-icon.vue"
import tmText from "@/tmui/components/tm-text/tm-text.vue"
import tmCarousel from "@/tmui/components/tm-carousel/tm-carousel.vue"
import tmScrollx from "@/tmui/components/tm-scrollx/tm-scrollx.vue"
import tmGrid from "@/tmui/components/tm-grid/tm-grid.vue"
import tmGridItem from "@/tmui/components/tm-grid-item/tm-grid-item.vue"
import tmImage from "@/tmui/components/tm-image/tm-image.vue"
import tmDivider from "@/tmui/components/tm-divider/tm-divider.vue"
import tmAlert from "@/tmui/components/tm-alert/tm-alert.vue"
import tmTabs from "@/tmui/components/tm-tabs/tm-tabs.vue"
import {
	useTmpiniaStore
} from '@/tmui/tool/lib/tmpinia'
import {
	computed,
	onMounted,
	ref,
	watch
} from "vue"
import theme from "@/tmui/tool/theme/theme"

import anydoorText from "@/components/anydoor-text/anydoor-text.vue"
import anydoorLabel from "@/components/anydoor-label/anydoor-label.vue"
import anydoorIndexLesson from "@/components/anydoor-index-lesson/anydoor-index-lesson.vue"
import anydoorNewsItem from "@/components/anydoor-news-item/anydoor-news-item.vue"
import anydoorPage from "@/components/anydoor-page/anydoor-page.vue"
import {
	getCurrentInstance
} from "vue"
import { listSwiper } from "@/common/service/swiper"
import { SOURCE_TYPE } from "@/common/define/sourceType"
import { merge } from "lodash"
import { UNI_STORAGE } from "@/common/database/UNI_STORAGE"
import { listIndexMenu } from "@/common/service/menu"
import { listTip } from "@/common/service/tip"
import { linkTo, menuLink, swiperLink } from "@/common/utils/link"
const {
	proxy
} = getCurrentInstance() as any

import {
	throttle
} from "lodash"
import { listNotice } from "@/common/service/notice"
import { diffTwoDays } from "@/common/utils/date"
import CODE from "@/common/define/code"
import { noticeFilter, toNoticeDetail } from "@/common/utils/notice"
import { ROUTE_PATH } from "@/router/ROUTE_PATH"
import { listArticle } from "@/common/service/article"
import { articleFilter, toArticleDetail } from "@/common/utils/article"
import useJiaowuStore from "@/store/jiaowu"
import Scan from "@/common/utils/Scan"
import { useLessonStore } from "@/store/lesson"
import Lesson from "@/common/database/Lesson/Lesson"
import dayjs from "dayjs"

const jiaowuStore = useJiaowuStore()

//临界值
const num = 70
const pageScrollY = ref(0);
const navbarBg = computed(() => {
	if (store.tmStore.dark) return "rgba(0, 0, 0, 1)"
	else {
		return `rgba(255, 255, 255, ${pageScrollY.value / num > 1 ? 1 : pageScrollY.value / num})`
	}
})
//头部颜色
const headerBg = computed(() => {
	if (store.tmStore.dark) return "rgba(0, 0, 0, 1)"
	else {
		const color = theme.getColor("primary")
		// console.log(colortool.hsvaToRgba(store.tmStore.))
		return `linear-gradient(to bottom, rgba(${color.rgba['r']},${color.rgba['g']},${color.rgba['b']},${0.4 - pageScrollY.value / num < 0 ? 0 : 0.4 - pageScrollY.value / num}), rgba(102, 255, 0, 0))`
	}
})

//页面滚动
onPageScroll((e) => {
	throttle(() => {
		pageScrollY.value = e.scrollTop >= num ? num : (e.scrollTop < 0 ? 0 : e.scrollTop)
	}, 1000 / 120)()
})
//store
const store = useTmpiniaStore()
//navbarHeight
const statusBarHeight = uni.getSystemInfoSync().statusBarHeight
//轮播图
const swiperList = ref<any>([])

//加载数据
onLoad(() => {
	refresh()
})

onShow(() => {
	getTime()
})

//下拉刷新是否完成
const refreshComplete = ref<boolean>(true)

// 页面刷新
const refresh = async () => {
	refreshComplete.value = false
	await Promise.allSettled([
		getSwiperList(),
		getTipList(),
		getIndexMenuList(),
		getNotice(),
		getArticle()
	])
	refreshComplete.value = true
}

//菜单列表
const menuList = ref<any>([])

const toSearch = function () {
	uni.navigateTo({
		url: "/pages/search/search",
		animationType: "slide-in-right"
	})
}

//获取tip
const tipList = ref<any>([])

const getTipList = async () => {
	//读取tip
	tipList.value = uni.getStorageSync(UNI_STORAGE.TIP_LIST) || []
	const data = await listTip({})
	tipList.value = data
}

//获取轮播列表
const getSwiperList = async () => {
	//首先读取缓存
	swiperList.value = uni.getStorageSync(UNI_STORAGE.SWIPER_LIST) || []
	try {
		const data = await listSwiper({
			cid: jiaowuStore.jiaowuConfig.cid
		})
		swiperList.value = (data.data || []).map((item: any) => {
			const result = {
				sid: item.sid,
				img: item.source,
				device: item.device,
				version: item.version,
				description: item.description,
				title: item.title,
				link: item.url,
				link_type: item.link_type,
				params: item.params
			}
			if (item.type === SOURCE_TYPE.VIDEO) {
				merge(result, {
					type: 'video',
				})
			}
			return result
		})
		//保存数据到缓存
		uni.setStorageSync(UNI_STORAGE.SWIPER_LIST, swiperList.value)
	} catch { }
}

//去轮播图详情
const toSwiperDetail = (index: number) => {
	const item = swiperList.value[index]
	if (item) {
		swiperLink(item)
	}
}

//获取首页菜单列表
const getIndexMenuList = async () => {
	//读取菜单列表
	menuList.value = uni.getStorageSync(UNI_STORAGE.MENU_INDEX_LIST) || []
	try {
		const data = await listIndexMenu({
			cid: useJiaowuStore().jiaowuConfig.cid
		})
		if (data.length > 0) menuList.value = data
	} catch { }
}

//获取首页通知
const noticeList = ref<any>([])
const noticeComplete = ref(false)
const getNotice = async () => {
	//通知
	noticeList.value = uni.getStorageSync(UNI_STORAGE.NOTICE_INDEX) || []
	if (noticeList.value.length > 0) noticeComplete.value = true
	try {
		const data = await listNotice({
			page: 1,
			limit: 5,
			cid: jiaowuStore.jiaowuConfig.cid
		})
		if (data.code === CODE.SUCCESS) {
			noticeList.value = data.data.map(noticeFilter)
			uni.setStorageSync(UNI_STORAGE.NOTICE_INDEX, noticeList.value)
		}
	} catch { }
	noticeComplete.value = true
}

//获取文章列表
const articleList = ref<any>([])
const articleComplete = ref(false)
const getArticle = async () => {
	//通知
	articleList.value = uni.getStorageSync(UNI_STORAGE.ARTICLE_INDEX) || []
	if (articleList.value.length > 0) articleComplete.value = true
	try {
		const data = await listArticle({
			page: 1,
			limit: 10,
			cid: jiaowuStore.jiaowuConfig.cid
		})
		if (data.code === CODE.SUCCESS) {
			articleList.value = data.data.map(articleFilter)
			uni.setStorageSync(UNI_STORAGE.ARTICLE_INDEX, articleList.value)
		}
	} catch { }
	articleComplete.value = true
}


//今日课程相关
const currentDayLessonList = ref<any>([])
const currentDayLessonLoading = ref<boolean>(true)
const getCurrentDayLessonList = async () => {
	currentDayLessonList.value = (await Lesson.getInstance()).getCurrentDayLesson()
	currentDayLessonLoading.value = false
}

const lessonStore = useLessonStore()
watch(() => lessonStore.initing, async (val) => {
	if (val === false) {
		getCurrentDayLessonList()
	}
}, { immediate: true })

const todayTimeStr = ref<string>()
const getTime = () => {
	const weekMapper = ['周日', '周一', '周二', '周三', '周四', '周五', '周六']
	todayTimeStr.value = `${dayjs().format("MM/DD")} ${weekMapper[dayjs().day()]}`
}
</script>

<style scoped lang="scss">
.index-navbar-box {
	width: 750rpx;

	.index-navbar {
		padding: 10rpx 0;

		.index-day {
			line-height: 60rpx;
			margin: 0 30rpx;
			font-size: 30rpx;
			font-weight: bold;
		}

		.index-input {
			flex-grow: 1;
			height: 60rpx;
		}

		.index-icons {
			.index-icon {
				margin: 0 30rpx;
				height: 60rpx;
				line-height: 60rpx;
				/* #ifdef APP-NVUE */
				margin-top: 8rpx;
				/* #endif */
			}
		}
	}
}

// .index-carousel-box {

// }

.bg {
	background-image: linear-gradient(to bottom, rgba(64, 169, 255, .5), rgba(102, 255, 0, 0));
}
</style>
